package com.cbmu.covidmap;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.Date;
import java.util.List;

@Slf4j
@Controller // This means that this class is a Controller
@CrossOrigin(origins = "*") 
@RequestMapping(path="/nyt-counts") // This means URL's start with /demo (after Application path)
public class NytCountsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NytCountsRepository nytCountsRepository;

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<NytCounts> getAllNationalCounts() {
        // This returns a JSON or XML with the users
        return nytCountsRepository.findAll();
    }

    @GetMapping(path = "/state/{state}/date/{date}")
    public @ResponseBody List<NytCounts> getAllByStateAndDate(
            @PathVariable String state,
            @DateTimeFormat(pattern = "yyyy-MM-dd'T'hh:mm:ssZ") @PathVariable Date date) {

        log.info("Searching for all records on {}", date);
        List<NytCounts> counts = nytCountsRepository.findAllByStateAndDate(state, date);


        if (! counts.isEmpty()) {
            return counts;
        }

        Sort sort = Sort.by(Sort.Direction.DESC, "date");
        List<DateOnly> dates = nytCountsRepository.findAllByStateAndDateBefore(state, date, sort);

        if (dates.isEmpty()) {
            return counts;
        }

        date = dates.get(0).getDate();
        return nytCountsRepository.findAllByStateAndDate(state, date);


    }


}
